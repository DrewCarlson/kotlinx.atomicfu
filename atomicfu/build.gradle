/*
 * Copyright 2016-2020 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license.
 */

apply plugin: 'kotlin-multiplatform'
apply from: rootProject.file("gradle/targets.gradle")

ext {
    nativeMainSets = []
    nativeTestSets = []
    nativeCompilations = []

    addNative = { preset ->
        nativeMainSets.add(preset.compilations['main'].kotlinSourceSets.first())
        nativeTestSets.add(preset.compilations['test'].kotlinSourceSets.first())
        nativeCompilations.add(preset.compilations['main'])
    }
}

kotlin {
    targets.metaClass.addTarget = { preset ->
        addNative(delegate.fromPreset(preset, preset.name))
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
            }
        }
        commonTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }
    }
}

// configure native targets only if they're not disabled
if (rootProject.ext.native_targets_enabled) {
    kotlin {
        targets {
            if (project.ext.ideaActive) {
                addNative(fromPreset(project.ext.ideaPreset, 'native'))
            } else {
                //addTarget(presets.linuxX64)
                addTarget(presets.linuxArm64)
                addTarget(presets.linuxArm32Hfp)
                addTarget(presets.linuxMips32)
                addTarget(presets.linuxMipsel32)
                //addTarget(presets.iosArm64)
                //addTarget(presets.iosArm32)
                //addTarget(presets.iosX64)
                //addTarget(presets.macosX64)
                addTarget(presets.mingwX86)
                //addTarget(presets.mingwX64)
                //addTarget(presets.tvosArm64)
                //addTarget(presets.tvosX64)
                //addTarget(presets.watchosArm32)
                //addTarget(presets.watchosArm64)
                //addTarget(presets.watchosX86)
                //addTarget(presets.watchosX64)

                //addTarget(presets.iosSimulatorArm64)
                //addTarget(presets.watchosSimulatorArm64)
                //addTarget(presets.tvosSimulatorArm64)
                //addTarget(presets.macosArm64)
            }
        }

        sourceSets {
            nativeMain { dependsOn commonMain }

            nativeTest {}

            if (!project.ext.ideaActive) {
                configure(nativeMainSets) {
                    dependsOn nativeMain
                }

                configure(nativeTestSets) {
                    dependsOn nativeTest
                }
            }
        }

        configure(nativeCompilations) {
            cinterops {
                interop {
                    defFile 'src/nativeInterop/cinterop/interop.def'
                }
            }
        }
    }

    // Hack for publishing as HMPP: pack the cinterop klib as a source set:
    if (!project.ext.ideaActive) {
        kotlin.sourceSets {
            nativeInterop
            nativeMain.dependsOn(nativeInterop)
        }

        apply from: "$rootDir/gradle/interop-as-source-set-klib.gradle"

        registerInteropAsSourceSetOutput(
                kotlin.linuxArm64().compilations["main"].cinterops["interop"],
                kotlin.sourceSets["nativeInterop"]
        )
    }
}

configurations {
    transformer
}

apply from: rootProject.file('gradle/compile-options.gradle')

ext.configureKotlin(true)

dependencies {
    transformer "org.jetbrains.kotlinx:atomicfu-transformer:0.17.0"
}

